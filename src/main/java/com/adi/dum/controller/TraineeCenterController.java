package com.adi.dum.controller;

import com.adi.dum.dto.TrainingCenterDTO;
import com.adi.dum.model.Address;
import com.adi.dum.model.TrainingCenter;
import com.adi.dum.service.AddressService;
import com.adi.dum.service.TrainingCenterService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import java.util.Collections;
import java.util.List;

@RestController
@RequestMapping(value = "/traini8")
public class TraineeCenterController {

    @Autowired
    private TrainingCenterService trainingCenterService;

    @Autowired
    private AddressService addressService;

    /**
     * API to save a new Training Center.
     *
     * Validations:
     * - Center Name must be less than 40 characters.
     * - Center Code must be exactly 12 alphanumeric characters.
     * - Address (detailed address, city, state, pincode) is required.
     * - Contact Email (if present) should be valid.
     * - Contact Phone should be properly formatted.
     * - CreatedOn is generated by the system (epoch timestamp).
     * - Courses Offered should be a list of text values.
     *
     * @param trainingCenterDTO HttpServletRequest containing JSON data.
     * @return ResponseEntity containing success or error message.
     */
    @PostMapping("/save")
    public ResponseEntity<?> saveTrainingCenter(@Valid @RequestBody TrainingCenterDTO trainingCenterDTO) {
        try {
            TrainingCenter trainingCenter = new TrainingCenter();
            trainingCenter.setCenterName(trainingCenterDTO.getCenterName());
            trainingCenter.setCenterCode(trainingCenterDTO.getCenterCode());
            trainingCenter.setStudentCapacity(trainingCenterDTO.getStudentCapacity());
            trainingCenter.setCoursesOffered(trainingCenterDTO.getCoursesOffered());
            trainingCenter.setContactEmail(trainingCenterDTO.getContactEmail());
            trainingCenter.setContactPhone(trainingCenterDTO.getContactPhone());
            Address address = null;
            if(trainingCenterDTO.getAddress() != null){
                address = new Address();
                address.setCity(trainingCenterDTO.getAddress().getCity());
                address.setState(trainingCenterDTO.getAddress().getState());
                address.setPincode(trainingCenterDTO.getAddress().getPincode());
                address.setDetailedAddress(trainingCenterDTO.getAddress().getDetailedAddress());
                address = addressService.save(address);
            }
            trainingCenter.setAddress(address);

            TrainingCenter savedCenter = trainingCenterService.save(trainingCenter);
            return new ResponseEntity<>(savedCenter, HttpStatus.CREATED);
        } catch (Exception e) {
            return new ResponseEntity<>("Error processing the request: " + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * API to fetch all stored Training Centers.
     *
     * Functionality:
     * - Retrieves all training centers from the database.
     * - If no training centers are found, returns an empty list.
     * - Returns data in JSON format.
     *
     * @return ResponseEntity containing a list of Training Centers or an empty list.
     */
    @GetMapping("/get-all-training-centers")
    public ResponseEntity<?> getAllTrainingCenters() {
        try {
            List<TrainingCenter> trainingCenters = trainingCenterService.findAll();

            // If no training centers found, return an empty list
            if (trainingCenters.isEmpty()) {
                return new ResponseEntity<>(Collections.emptyList(), HttpStatus.OK);
            }

            return new ResponseEntity<>(trainingCenters, HttpStatus.OK);
        } catch (Exception e) {
            e.printStackTrace();
            return new ResponseEntity<>("Error processing the request: " + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

}
